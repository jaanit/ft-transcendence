generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  auth_id             String         @unique
  nickname            String         @unique
  firstSignIn         Boolean        @default(true)
  displayname         String?
  status              String         @default("offline")
  picture             String?
  isTfaEnabled        Boolean        @default(false)
  isTfaValidated      Boolean        @default(false)
  tfaSecret           String?
  blocked             BlockedUser[]  @relation("BlockedByUsers")
  blocker             BlockedUser[]  @relation("BlockingUsers")
  friends1            Friends[]      @relation("User1ToFriends")
  friends2            Friends[]      @relation("User2ToFriends")
  Member              Members[]
  Message             Message[]
  NoticationRecipient Notification[] @relation("Recipient")
  NoticationSource    Notification[] @relation("Source")
  stats               Stats?
  achievement         Achievement[]
  GameHost            Game[]         @relation("User1ToGame")
  GamePlayer          Game[]         @relation("User2ToGame")
  BotGame             BotGame[]
}

model Game {
  gameId    Int      @id @default(autoincrement())
  score1    Int      @default(0)
  score2    Int      @default(0)
  status    String   @default("notStarted")
  user1     Users    @relation("User1ToGame", fields: [user1_id], references: [auth_id])
  user2     Users    @relation("User2ToGame", fields: [user2_id], references: [auth_id])
  user1_id  String
  user2_id  String
  map       String   @default("winter.hdr")
  dimension String   @default("3D")
  option    String   @default("Ranked")
  winner    String   @default("noWinner")
  time      DateTime @default(now())
}

model BotGame {
  botGameId Int      @id @default(autoincrement())
  score1    Int      @default(0)
  score2    Int      @default(0)
  status    String   @default("notStarted")
  user1     Users    @relation(fields: [user1_id], references: [auth_id])
  user1_id  String
  winner    String   @default("noWinner")
  map       String   @default("winter.hdr")
  dimension String   @default("3D")
  option    String   @default("Ranked")
  time      DateTime @default(now())
}

model image {
  id   Int    @id @default(autoincrement())
  type String
  data Bytes
}

model Stats {
  stats_id      Int    @id @default(autoincrement())
  user_id       String @unique
  wins          Int    @default(0)
  losses        Int    @default(0)
  goal_conceded Int    @default(0)
  goal_scoared  Int    @default(0)
  clean_sheets  Int    @default(0)
  points        Int    @default(0)
  leaderboard   Int    @default(1500)
  user          Users  @relation(fields: [user_id], references: [auth_id])
}

model Friends {
  friendship_id Int      @id @default(autoincrement())
  user1_id      String
  user2_id      String
  status        String
  request_date  DateTime @default(now())
  accept_date   DateTime @default(now())
  user1         Users    @relation("User1ToFriends", fields: [user1_id], references: [auth_id])
  user2         Users    @relation("User2ToFriends", fields: [user2_id], references: [auth_id])
}

model BlockedUser {
  block_id       Int    @id @default(autoincrement())
  blocked_id     String
  blocker_id     String
  blockedByUsers Users  @relation("BlockedByUsers", fields: [blocked_id], references: [auth_id])
  blockingUsers  Users  @relation("BlockingUsers", fields: [blocker_id], references: [auth_id])
}

model Groups {
  id         Int       @id @default(autoincrement())
  name       String
  type       String    @default("duo")
  privacy    String    @default("private")
  password   String?
  picture    String    @default("")
  lastChange DateTime  @default(now())
  members    Members[]
  messages   Message[]
}

model Members {
  id       Int       @id @default(autoincrement())
  user_id  String
  group_id Int
  type     String    @default("member")
  banned   Boolean   @default(false)
  muted    DateTime?
  group    Groups    @relation(fields: [group_id], references: [id])
  user     Users     @relation(fields: [user_id], references: [auth_id])
}

model Message {
  id           Int      @id @default(autoincrement())
  message_text String
  group_id     Int
  lastmodif    DateTime @default(now())
  sender_id    String
  group        Groups   @relation(fields: [group_id], references: [id])
  sender       Users    @relation(fields: [sender_id], references: [auth_id])
}

model Achievement {
  achievement_id Int    @id @default(autoincrement())
  user_id        String
  user           Users  @relation(fields: [user_id], references: [auth_id])
  name           String @default("")
  description    String @default("")
  level          Int    @default(0)
  goal_scoared   Int    @default(0)
  clean_sheets   Int    @default(0)
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  type            String
  sender_id       String
  receiver_id     String
  path            String
  seen            Boolean  @default(false)
  last_change     DateTime @default(now())
  Recipient       Users    @relation("Recipient", fields: [receiver_id], references: [auth_id])
  Source          Users    @relation("Source", fields: [sender_id], references: [auth_id])
}
